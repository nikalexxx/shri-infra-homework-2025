# Используем официальный образ Node.js в качестве базового.
# Мы выбираем версию 18-alpine, потому что Alpine Linux очень лёгкий и уменьшает размер образа.
FROM node:18-alpine AS base

# Устанавливаем рабочую директорию внутри контейнера.
# Все последующие команды будут выполняться относительно этой директории.
WORKDIR /app

# Копируем файлы package.json и package-lock.json (или yarn.lock),
# чтобы установить зависимости. Это делается на первом этапе, чтобы
# воспользоваться кэшированием слоёв Docker: если зависимости не меняются,
# то этот слой не будет перестраиваться.
COPY package*.json ./

# Устанавливаем зависимости проекта.
# 'npm ci' используется для чистой установки зависимостей,
# основываясь на package-lock.json, что делает сборку более надёжной.
RUN npm ci

# Копируем остальной код приложения в рабочую директорию.
COPY . .

# Собираем клиентский код приложения.
# Это создаст оптимизированные для продакшена файлы.
RUN npm run build

# Определяем, какой порт будет слушать наше приложение внутри контейнера.
EXPOSE 3000

# Команда, которая будет запускаться при старте контейнера.
# 'npm start' запустит наш сервер.
CMD ["npm", "start"]