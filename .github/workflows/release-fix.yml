name: Release Fix

on:
    workflow_dispatch:
        inputs:
            RELEASE_VERSION:
                description: "Release version"
                required: true

jobs:
    check:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                task: [lint, test]
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 22
            - run: npm ci
            - run: npm run ${{ matrix.task }}

    release-fix:
        needs: check
        runs-on: ubuntu-latest
        env:
            VERSION: ${{ github.event.inputs.RELEASE_VERSION }}
            FIX: ${{ github.run_number }}
        steps:
            - name: Checkout release branch
              uses: actions/checkout@v4
              with:
                  ref: releases/${{ github.event.inputs.RELEASE_VERSION }}
                  fetch-depth: 0

            - name: Login to Yandex Cloud
              run: |
                  docker login -u oauth -p ${{ secrets.YC_OAUTH_TOKEN }} cr.yandex

            - name: Build Docker images
              run: |
                  docker build -t cr.yandex/${{ secrets.YC_CR_REGISTRY_ID }}/app:${VERSION}_fix${FIX} .
                  docker tag cr.yandex/${{ secrets.YC_CR_REGISTRY_ID }}/app:${VERSION}_fix${FIX} cr.yandex/${{ secrets.YC_CR_REGISTRY_ID }}/app:${VERSION}_latest

            - name: Push Docker images
              run: |
                  docker push cr.yandex/${{ secrets.YC_CR_REGISTRY_ID }}/app:${VERSION}_fix${FIX}
                  docker push cr.yandex/${{ secrets.YC_CR_REGISTRY_ID }}/app:${VERSION}_latest

            - name: Create and push fix tag
              run: |
                  git config user.name "github-actions"
                  git config user.email "github-actions@github.com"
                  git tag ${VERSION}_fix${FIX}
                  git push origin ${VERSION}_fix${FIX}

            - name: Get previous tag and commits
              id: commits
              run: |
                  COMMITS=$(git log --oneline --pretty=format:"- %h %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
                  if [ -z "$COMMITS" ]; then
                    COMMITS="(нет новых коммитов)"
                  fi
                  {
                    echo 'COMMITS<<ENDCOMMITS'
                    echo "$COMMITS"
                    echo 'ENDCOMMITS'
                  } >> $GITHUB_ENV

            - name: Find release issue number
              id: issue
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  ISSUE_NUMBER=$(gh issue list --state open --search "Release $VERSION" --json number --jq '.[0].number')
                  echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

            - name: Add comment to release issue
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  gh issue comment ${{ steps.issue.outputs.ISSUE_NUMBER }} \
                    --body "Дата фикса: $(date '+%Y-%m-%d %H:%M:%S')
                  Автор фикса: ${{ github.actor }}
                  Список коммитов:
                  ${{ env.COMMITS }}

                  Docker-образ: cr.yandex/${{ secrets.YC_CR_REGISTRY_ID }}/app:${VERSION}_fix${FIX}
                  "
