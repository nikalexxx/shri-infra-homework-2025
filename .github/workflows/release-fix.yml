name: release-fix

permissions:
  id-token: write
  contents: read

env:
  RELEASE_BRANCH: releases/${{ github.event.inputs.release-version }}
  REGISTRY: cr.yandex/crp8ugevmr1vj1p9f3jh
  IMAGE_NAME: app

on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Target release version number to apply a fix'
        required: true

jobs:
  validate-and-run:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate that the release branch exists
        run: |
          echo "–ò—â–µ–º –≤–µ—Ç–∫—É: $RELEASE_BRANCH"

          if ! git ls-remote --exit-code --heads origin "$RELEASE_BRANCH" > /dev/null; then
            echo "‚ùå –†–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ç–∫–∏ '$RELEASE_BRANCH' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            exit 1
          fi
      - run: git checkout $RELEASE_BRANCH

  checks:
    needs: validate-and-run
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [lint, test]
    name: Run ${{ matrix.task }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm run ${{ matrix.task }}
  build-and-push-app-image:
    needs: checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set BASE_IMAGE_NAME
        run: |
          echo "BASE_IMAGE_NAME=${REGISTRY}/${IMAGE_NAME}:${{ github.event.inputs.release-version }}_fix${{ github.run_number }}" >> $GITHUB_ENV

      - name: Build app image
        run: |
          docker build -t $BASE_IMAGE_NAME .
          docker tag $BASE_IMAGE_NAME $REGISTRY/$IMAGE_NAME:${{ github.event.inputs.release-version}}_latest

      - name: Login to Yandex CR
        id: login-cr
        uses: yc-actions/yc-cr-login@v3
        with:
          yc-sa-id: ${{ secrets.YC_SA_ID }}

      - name: Push app images
        run: |
          docker push $BASE_IMAGE_NAME
          docker push $REGISTRY/$IMAGE_NAME:${{ github.event.inputs.release-version}}_latest
  tag:
    needs: build-and-push-app-image
    runs-on: ubuntu-latest
    steps:
      - name: Create git tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag ${ github.event.inputs.release-version }_fix${{ github.run_number }}
          git push origin $RELEASE_BRANCH
  
  add-issue-comment:
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - name: Add comment to release issue with commit list
        shell: bash
        env:
          VERSION: ${{ github.event.inputs.release-version }}
          FIX_NUMBER: ${{ github.run_number }}
        run: |
          if [ "$FIX_NUMBER" -eq 1 ]; then
            PREV_TAG="$VERSION"
          else
            PREV_FIX=$((FIX_NUMBER - 1))
            PREV_TAG="${VERSION}_fix${PREV_FIX}"
          fi

          git fetch --tags
          COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h) by %an" --no-merges)

          if [ -z "$COMMITS" ]; then
            COMMITS="(–Ω–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤)"
          fi

          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Add comment to release issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = process.env.VERSION;
            const commits = process.env.COMMITS;
            const actor = context.actor;
            const date = new Date().toISOString().split("T")[0];
            const commentBody = `
            üîß –í—ã–ø—É—â–µ–Ω —Ñ–∏–∫—Å –¥–ª—è –≤–µ—Ä—Å–∏–∏ **${version}**.
              **–î–∞—Ç–∞:** ${date}
              **–ê–≤—Ç–æ—Ä:** ${actor}
              **–ö–æ–º–º–∏—Ç—ã:**
              ${commits}
            `;

            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100,
            });

            const issue = issues.find(issue => issue.title === `–†–µ–ª–∏–∑ ${version}`);

            if (!issue) {
              core.setFailed(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ issue —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–†–µ–ª–∏–∑ ${version}"`);
              return;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: commentBody
            });
