name: Fix Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Fix release"
        required: true

env:
  DOCKER_REGISTRY: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app

jobs:
  fix:
    name: Create Fix
    runs-on: ubuntu-latest

    env:
      BASE_VERSION: ${{ inputs.release_version }}

    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: releases/${{ inputs.release_version }}
          fetch-depth: 0

      - name: Set HOTFIX_TAG
        run: echo "HOTFIX_TAG=${BASE_VERSION}_fix${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install and verify
        run: |
          npm ci
          npm run lint
          npm test

      - name: Build and push Docker image
        run: |
          FULL_TAG="$DOCKER_REGISTRY:$HOTFIX_TAG"
          echo "Building Docker image with tag: $FULL_TAG"
          docker build -t "$FULL_TAG" .
          docker tag "$FULL_TAG" "$DOCKER_REGISTRY:${BASE_VERSION}_latest"
          echo '${{ secrets.YC_SA_KEY }}' | docker login --username json_key --password-stdin cr.yandex
          docker push "$FULL_TAG"
          docker push "$DOCKER_REGISTRY:${BASE_VERSION}_latest"

      - name: Tag fix
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag v$HOTFIX_TAG
          git push origin v$HOTFIX_TAG

      - name: Generate fix notes
        id: hotfix-notes
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 v$HOTFIX_TAG^ 2>/dev/null || echo "v$BASE_VERSION")
          COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:"- %h %s (%an)")
          
          {
            echo "notes<<EOF"
            echo "$COMMITS"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Update issue
        if: github.event.repository.has_issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          BASE_VERSION: ${{ env.BASE_VERSION }}
          HOTFIX_TAG: ${{ env.HOTFIX_TAG }}
        run: |
          ISSUE_NUMBER=$(gh issue list --search "Release v$BASE_VERSION" --json number --jq '.[0].number')
          gh issue comment $ISSUE_NUMBER --body "$(printf "### Fix v%s\n\n**Date:** %s\n**Author:** %s\n\n**Changes:**\n%s\n\n**Docker Image:**\n%s:%s" "$HOTFIX_TAG" "$(date '+%Y-%m-%d %H:%M')" "${{ github.actor }}" "${{ steps.hotfix-notes.outputs.notes }}" "$DOCKER_REGISTRY" "$HOTFIX_TAG")"
