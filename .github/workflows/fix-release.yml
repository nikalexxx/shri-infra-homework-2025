name: Fix Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: '–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.2.3)'
        required: true
      issue-number:
        type: number
        required: true
        description: "Issue number id"

env:
  REGISTRY: cr.yandex/${{ secrets.YC_REGISTRY_ID }}
  IMAGE_NAME: app
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      fix_number: ${{ steps.fix.outputs.fix_number }}
    steps:
      - uses: actions/checkout@v4

      - name: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∏–∫—Å–∞
        id: fix
        run: |
          VERSION="${{ github.event.inputs.release_version }}"
          LAST_TAG=$(git tag --list "v${VERSION}_fix*" --sort=-v:refname | head -n1)

          if [[ -z "$LAST_TAG" ]]; then
            FIX_NUMBER=1
          else
            LAST_NUM=$(echo "$LAST_TAG" | grep -oP 'fix\K[0-9]+')
            FIX_NUMBER=$((LAST_NUM + 1))
          fi

          echo "fix_number=$FIX_NUMBER" >> $GITHUB_OUTPUT

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          npm ci
          npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          npm ci
          npm test

  release:
    needs: [setup, lint, test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    env:
      VERSION: ${{ github.event.inputs.release_version }}
      FIX: ${{ needs.setup.outputs.fix_number }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current date
        id: date
        run: echo "date=$(date -u +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      - name: Yandex Cloud CR Login
        uses: yc-actions/yc-cr-login@v2
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

      - name: Build Docker Image with Tags
        run: |
          IMAGE="$REGISTRY/$IMAGE_NAME"
          docker build -t "$IMAGE:${VERSION}_fix${FIX}" -t "$IMAGE:${VERSION}_latest" .
          docker push "$IMAGE:${VERSION}_fix${FIX}"
          docker push "$IMAGE:${VERSION}_latest"

      - name: Create Git Tag
        run: |
          TAG="v${VERSION}_fix${FIX}"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping tag creation."
          else
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Get Previous Tag
        id: prev_tag
        run: |
          PREV=$(git tag --list "v${VERSION}_fix*" --sort=-v:refname | grep -v "v${VERSION}_fix${FIX}" | head -n1)
          if [ -z "$PREV" ]; then
            PREV="v${VERSION}"
          fi
          echo "prev_tag=$PREV" >> "$GITHUB_OUTPUT"

      - name: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        id: comment_body
        run: |
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "üîß **–§–∏–∫—Å —Ä–µ–ª–∏–∑–∞ \`${VERSION}\`**" >> $GITHUB_OUTPUT
          echo "üìÖ –î–∞—Ç–∞ —Ñ–∏–∫—Å–∞: ${{ steps.date.outputs.date }}" >> $GITHUB_OUTPUT
          echo "üë§ –ê–≤—Ç–æ—Ä: @${{ github.actor }}" >> $GITHUB_OUTPUT
          echo "üßæ –í–µ—Ä—Å–∏—è: \`${VERSION}_fix${FIX}\`" >> $GITHUB_OUTPUT
          echo "üì¶ Docker –æ–±—Ä–∞–∑—ã:" >> $GITHUB_OUTPUT
          echo "\`${REGISTRY}/${IMAGE_NAME}:${VERSION}_fix${FIX}\`" >> $GITHUB_OUTPUT
          echo "\`${REGISTRY}/${IMAGE_NAME}:${VERSION}_latest\`" >> $GITHUB_OUTPUT
          echo "üîç –ö–æ–º–º–∏—Ç—ã —Å –º–æ–º–µ–Ω—Ç–∞ \`${{ steps.prev_tag.outputs.prev_tag }}\`:" >> $GITHUB_OUTPUT
          echo '```markdown' >> $GITHUB_OUTPUT
          echo "${{ steps.changelog.outputs.log }}" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment to GitHub Issue
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{inputs.issue-number}}
          body: ${{ steps.comment_body.outputs.body }}
