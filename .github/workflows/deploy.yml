name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version to deploy"
        required: true
        type: string

env:
  YC_REGISTRY: cr.yandex/${{ secrets.YC_REGISTRY_ID }}
  IMAGE_NAME: infra-hw

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set image tag
        id: set_tag
        run: |
          if [ -n "${{ github.event.inputs.release_version }}" ]; then
            echo "IMAGE_TAG=${{ github.event.inputs.release_version }}_latest" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TAG=latest" >> $GITHUB_OUTPUT
          fi

      - name: Login to Yandex Cloud Container Registry
        uses: docker/login-action@v3
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

      - name: Check if image exists
        run: |
          docker manifest inspect ${{ env.YC_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.IMAGE_TAG }}

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Login to Yandex Cloud Container Registry
            echo '${{ secrets.YC_SA_JSON_CREDENTIALS }}' | docker login --username json_key --password-stdin cr.yandex

            # Stop existing container if running
            docker stop shri-app || true
            docker rm shri-app || true

            # Pull and run new image
            docker pull ${{ env.YC_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.IMAGE_TAG }}
            docker run -d --name shri-app -p 3000:3000 --restart unless-stopped ${{ env.YC_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.IMAGE_TAG }}

      - name: Get release issue number
        id: issue
        run: |
          ISSUE_NUMBER=$(gh issue list --search "Release ${{ steps.set_tag.outputs.IMAGE_TAG }}" --json number --jq '.[0].number')
          echo "number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on release issue
        if: steps.issue.outputs.number != ''
        run: |
          gh issue comment ${{ steps.issue.outputs.number }} --body "## Production Deployment

          **Deploy Date:** $(date)
          **Deploy Author:** ${{ github.actor }}
          **Version:** ${{ steps.set_tag.outputs.IMAGE_TAG }}

          The release has been successfully deployed to production."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
