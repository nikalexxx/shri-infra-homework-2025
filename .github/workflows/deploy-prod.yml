name: Deploy to Prod
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version to deploy"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Docker login to YCR
        run: echo "${{ secrets.YCR_TOKEN }}" | docker login --username oauth --password-stdin cr.yandex

      - name: Check if image exists
        run: |
          IMAGE="cr.yandex/${{ secrets.REESTR_ID }}/app:${{ github.event.inputs.version }}_latest"
          docker manifest inspect "$IMAGE" > /dev/null 2>&1 \
            || (echo "Image not found: $IMAGE" && exit 1)

      - name: SSH & Run container
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull cr.yandex/${{ secrets.REESTR_ID }}/app:${{ github.event.inputs.version }}_latest
            docker stop app || true
            docker rm app || true
            docker run -d --name app cr.yandex/${{ secrets.REESTR_ID }}/app:${{ github.event.inputs.version }}_latest

      - name: Find release issue by title
        id: find_issue
        uses: actions/github-script@v7
        env:
          VERSION: ${{ github.event.inputs.version }}
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 10
            });

            const match = issues.find(issue => issue.title === `Release v${process.env.VERSION}`);
            if (!match) {
              throw new Error(`Release issue for version ${process.env.VERSION} not found`);
            }
            core.setOutput("issue_number", match.number);

      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          script: |
            const today = new Date().toISOString().split("T")[0];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.find_issue.outputs.issue_number }},
              body: `Deployed version ${process.env.VERSION}_latest to prod by @${{ github.actor }} on ${today}`
            });
        env:
          VERSION: ${{ github.event.inputs.version }}
