name: 4. Deploy to Production

on:
  workflow_dispatch:
    inputs:
      release_version:
        type: string
        description: 'Версия релиза (например: v1.0.0)'
        required: true

env:
  YANDEX_OAUTH_TOKEN: ${{ secrets.YANDEX_OAUTH_TOKEN }}
  REGISTRY_ID: ${{ secrets.YANDEX_REGISTRY_ID }}
  VERSION: ${{ inputs.release_version}}
  DOCKER_IMAGE_NAME: cr.yandex/${{ secrets.YANDEX_REGISTRY_ID }}/app

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate with Container Registry
        run: |
          echo ${{ env.YANDEX_OAUTH_TOKEN }}|docker login \
            --username oauth \
            --password-stdin \
          cr.yandex

      # проверяет что образ существует
      - name: Check if image exists in registry
        id: check-image
        run: |
          IMAGE_NAME=${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}
          docker manifest inspect $IMAGE_NAME > /dev/null 2>&1
          if [ $? -eq 0 ]; then
            echo "✅ Образ найден: $IMAGE_NAME"
            echo "::set-output name=image_exists::true"
          else
            echo "❌ Образ не найден: $IMAGE_NAME"
            exit 1
          fi

      - name: SSH into VM and pull/run Docker image
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |

            # https://yandex.cloud/ru/docs/container-registry/tutorials/run-docker-on-vm/console#run
            curl --header Metadata-Flavor:Google 169.254.169.254/computeMetadata/v1/instance/service-accounts/default/token | \
            cut -f1 -d',' | \
            cut -f2 -d':' | \
            tr -d '"' | \
            docker login --username iam --password-stdin cr.yandex

            CONTAINERS=$(docker ps -q)
            if [ -n "$CONTAINERS" ]; then
              docker stop $CONTAINERS
            fi

            docker pull ${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}
            docker run -d  -p 3000:3000 ${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}

      - name: Find issue by release version
        id: find_issue
        uses: actions/github-script@v7
        env:
          VERSION: ${{ inputs.release_version }}
        with:
          script: |
            const tagName = 'Release v' + process.env.VERSION;
            const response = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',  // ищем и открытые, и закрытые
              per_page: 100
            });

            const issue = response.data.find(i => i.title === tagName);

            if (!issue) {
              console.log(`Issue с заголовком "${tagName}" не найден`);
              core.setOutput('issue_number', '');
            } else {
              console.log(`Найден Issue: #${issue.number}`);
              core.setOutput('issue_number', String(issue.number));
            }
            return issue ? { number: issue.number } : {};

      - name: Debug Output issue number
        run: |
          echo "Issue number: ${{ steps.find_issue.outputs.issue_number }}"

      - name: Add comment to related GitHub Issue
        if: steps.find_issue.outputs.issue_number
        uses: actions/github-script@v7
        with:
          script: |
            const message = `
            ✅ Релиз \`${{ inputs.release_version }}\` успешно выкачен в production!

            **Дата:** ${new Date().toISOString()}
            **Кем запущен:** @${{ github.actor }}
            `;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.find_issue.outputs.issue_number }},
              body: message
            });
