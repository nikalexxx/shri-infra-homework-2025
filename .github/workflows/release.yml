name: Manual Release

on:
  workflow_dispatch:

env:
  REGISTRY: cr.yandex/${{secrets.YC_REGISTRY_ID}}
  IMAGE_NAME: app
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Linter
        run: |
          npm ci
          npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Tests
        run: |
          npm ci
          npm test

  release:
    needs: [ lint, test ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    env:
      VERSION: ${{ github.run_number }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get current date
        id: date
        run: echo "date=$(date -u +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      - name: Create release branch
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout -b releases/${{ env.VERSION }}
          git push origin releases/${{ env.VERSION }}

      - name: Yandex Cloud CR "Login" Action for GitHub Actions
        uses: yc-actions/yc-cr-login@v2
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

      - name: Create Docker image
        run: |
          docker build -t cr.yandex/${{secrets.YC_REGISTRY_ID}}/app:${{ github.run_number }} .
          docker push cr.yandex/${{secrets.YC_REGISTRY_ID}}/app:${{ github.run_number }}

      - name: Create Docker image current
        run: |
          docker image build -t cr.yandex/${{secrets.YC_REGISTRY_ID}}/app:${{ github.run_number }}_latest .
          docker push cr.yandex/${{secrets.YC_REGISTRY_ID}}/app:${{ github.run_number }}_latest

      - name: Get last release tag
        id: last_tag
        run: echo "tag=$(git describe --tags --abbrev=0 || echo '')" >> "$GITHUB_OUTPUT"

      - name: Generate changelog
        id: changelog
        run: |
          if [ -z "${{ steps.last_tag.outputs.tag }}" ]; then
            log=$(git log --pretty=format:"* %s (%h)")
          else
            log=$(git log ${{ steps.last_tag.outputs.tag }}..HEAD --pretty=format:"* %s (%h)")
          fi
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "$log" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create git tag for release
        run: |
          git tag ${{ env.VERSION }}
          git push origin ${{ env.VERSION }}

      - name: Update CHANGELOG.md
        run: |
          npm ci
          node scripts/update-changelog.js
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for release v${{ env.RELEASE_VERSION }}"
          git push --set-upstream origin releases/${{ env.VERSION }}
        env:
          VERSION: ${{ env.VERSION }}
          DATE: ${{ steps.date.outputs.date }}

      - name: Create GitHub Issue
        run: |
          gh issue create \
            --title "Release ${{ env.VERSION }}" \
            --body "**Дата:** ${{ steps.date.outputs.date }}  
            **Автор:** ${{ github.actor }}
            **Версия:** ${{ env.VERSION }}
            **Образ:** $REGISTRY/$IMAGE_NAME:${{ env.VERSION }}
            **Коммиты:**
            ${{ steps.changelog.outputs.log }}" \
            --repo ${{ github.repository }}
