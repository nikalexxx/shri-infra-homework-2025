name: Release
permissions:
  id-token: write
  contents: write
  issues: write

on: workflow_dispatch

env:
  REGISTRY: cr.yandex/crp8ugevmr1vj1p9f3jh
  IMAGE_NAME: app
  VERSION: ${{ github.run_number }}

jobs:
  checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [lint, test]
    name: Run ${{ matrix.task }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm run ${{ matrix.task }}

  prepare-release:
    needs: checks
    runs-on: ubuntu-latest
    name: Prepare release
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Create release branch
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git checkout -b releases/${{ env.VERSION }}
          git push origin releases/${{ env.VERSION }}

      - name: Save release tag to file (for reuse)
        run: echo "${VERSION}" > version.txt

      - name: Upload release version for later jobs
        uses: actions/upload-artifact@v4
        with:
          name: release-meta
          path: version.txt

  build-and-push-app-image:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: release-meta

      - name: Set release version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Build app image
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:$VERSION .
          docker tag $REGISTRY/$IMAGE_NAME:$VERSION $REGISTRY/$IMAGE_NAME:${VERSION}_latest

      - name: Login to Yandex Container Registry
        uses: yc-actions/yc-cr-login@v3
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_KEY_JSON }}

      - name: Push app images
        run: |
          docker push $REGISTRY/$IMAGE_NAME:$VERSION
          docker push $REGISTRY/$IMAGE_NAME:${VERSION}_latest

  tag:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - uses: actions/download-artifact@v4
        with:
          name: release-meta

      - name: Set release version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Create git tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag $VERSION
          git push origin $VERSION

  changelog:
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # нужно для получения всех тэгов

      - uses: actions/download-artifact@v4
        with:
          name: release-meta

      - name: Set version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Get previous tag
        id: prevtag
        run: |
          PREV=$(git tag --sort=-creatordate | grep -E '^[0-9]+$' | grep -v "^$VERSION$" | head -n1)
          echo "PREVIOUS_TAG=$PREV" >> $GITHUB_ENV
          echo "previous_tag=$PREV" >> $GITHUB_OUTPUT

      - name: Get commit list
        id: commitlog
        run: |
          COMMITS=$(git log ${{ steps.prevtag.outputs.previous_tag }}..HEAD --pretty=format:"- %s (%an)")
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = process.env.VERSION;
            const commits = process.env.COMMITS;
            const actor = context.actor;
            const date = new Date().toISOString().split("T")[0];
            const body = `
            **Дата:** ${date}
            **Автор:** ${actor}
            **Версия:** ${version}
            **Коммиты:**
            ${commits}

            **Docker образ:**
            ${process.env.REGISTRY}/${process.env.IMAGE_NAME}:${version}
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Релиз ${version}`,
              body
            });

      - name: Update CHANGELOG.md
        run: |
          echo -e "## $VERSION\n\n$COMMITS\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git commit -am "docs: update changelog for release $VERSION"
          git push origin HEAD:releases/$VERSION
