name: Release

on:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SetËµ∑Êù•‰∫Ü Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24.x"

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24.x"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

  release:
    runs-on: ubuntu-latest
    needs: [lint, test]
    env:
      REGISTRY: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create release branch
        env:
          VERSION: ${{ github.run_number }}
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git checkout -b releases/${VERSION}
          git push origin releases/${VERSION}

      - name: Build Docker image
        run: |
          docker build -t $REGISTRY:${{ github.run_number }} .
          docker tag $REGISTRY:${{ github.run_number }} $REGISTRY:${{ github.run_number }}_latest

      - name: Login to Yandex Container Registry
        run: |
          docker login -u oauth -p ${{ secrets.YC_OAUTH_TOKEN }} cr.yandex

      - name: Push Docker image
        run: |
          docker push $REGISTRY:${{ github.run_number }}
          docker push $REGISTRY:${{ github.run_number }}_latest

      - name: Create git tag
        env:
          VERSION: ${{ github.run_number }}
        run: |
          git tag v${VERSION}
          git push origin v${VERSION}

      - name: Generate changelog from commits
        id: changelog
        env:
          VERSION: ${{ github.run_number }}
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %h: %s" --no-merges || echo "- –ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑")
          else
            COMMITS=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %h: %s" --no-merges || echo "- –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤")
          fi
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update CHANGELOG.md
        env:
          VERSION: ${{ github.run_number }}
          COMMITS: ${{ env.COMMITS }}
        run: |
          {
            echo "## v${VERSION} ‚Äî $(date +'%Y-%m-%d')"
            echo ""
            echo "$COMMITS"
            echo ""
            cat CHANGELOG.md 2>/dev/null || echo ""
          } > CHANGELOG.tmp.md
          mv CHANGELOG.tmp.md CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "docs: update changelog for v${VERSION}" || echo "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ CHANGELOG"
          git push origin releases/${VERSION}

      - name: Create GitHub issue for deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.run_number }}
          REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"  - %h: %s" --no-merges || echo "  - –ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑")
          else
            COMMITS=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"  - %h: %s" --no-merges || echo "  - –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤")
          fi
          BODY="## üì¶ –î–µ–ø–ª–æ–π v${VERSION}\n\n**–î–∞—Ç–∞**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n**–ê–≤—Ç–æ—Ä**: ${{ github.actor }}\n**–í–µ—Ä—Å–∏—è**: ${VERSION}\n**–ö–æ–º–º–∏—Ç—ã**:\n${COMMITS}\n\n**Docker-–æ–±—Ä–∞–∑**: cr.yandex/${REGISTRY_ID}/app:${VERSION}_latest"
          curl -s -X POST https://api.github.com/repos/${{ github.repository }}/issues \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "$(jq -n --arg title "Release v${VERSION}" --arg body "$BODY" --arg label "deploy" '{title: $title, body: $body, labels: [$label]}')"
