name: release

on:
  push:
    tags:
      - 'releases/*'
  workflow_dispatch: {}

jobs:
  build-release:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest

    env:
      VERSION_RAW: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.run_number }}
      IMAGE: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app   # ← 1. правильный secret

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: sync main
        run: git pull --ff-only origin main

      - name: normalize version
        run: |
          VER=${VERSION_RAW#releases/}
          echo "VERSION=$VER" >>"$GITHUB_ENV"

      - name: ensure release branch
        run: |
          if git show-ref --quiet refs/heads/releases/${VERSION}; then
            git switch releases/${VERSION}
          else
            git switch -c releases/${VERSION}
          fi
          git push -u origin HEAD

      - name: set git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: npm ci
      - run: npm run lint
      - run: npm run test

     
      - run: echo "${{ secrets.YC_OAUTH_TOKEN }}" | docker login -u iam --password-stdin cr.yandex

      - run: |
          docker build -t ${IMAGE}:${VERSION} -t ${IMAGE}:${VERSION}_latest .
          docker push ${IMAGE}:${VERSION}
          docker push ${IMAGE}:${VERSION}_latest


      - name: create git tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git tag v${VERSION}
          git push origin v${VERSION}


      - name: define LAST_TAG
        id: lasttag
        run: echo "LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")" >> $GITHUB_OUTPUT

      - name: prepend CHANGELOG
        id: changelog
        run: |
          set -euo pipefail
          LAST_TAG="${{ steps.lasttag.outputs.LAST_TAG }}"
          COMMITS=$(git log --pretty=format:'- %s' ${LAST_TAG:+${LAST_TAG}..HEAD})

          TMP=$(mktemp)
          {
            echo "## ${VERSION} ($(date +%Y-%m-%d))"
            echo "${COMMITS}"
            echo
            cat CHANGELOG.md
          } > "$TMP"
          mv "$TMP" CHANGELOG.md

          if ! git diff --quiet CHANGELOG.md; then
            git add CHANGELOG.md
            git commit -m "chore: changelog for ${VERSION}"
            git push origin HEAD
          fi

          printf 'COMMITS<<EOF\n%s\nEOF\n' "${COMMITS}" >> "$GITHUB_OUTPUT"

      - name: open release issue
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          BODY=$(cat <<EOF
          **Дата:** $(date)
          **Автор:** ${{ github.actor }}
          **Версия:** ${VERSION}

          **Коммиты:**
          ${{ steps.changelog.outputs.COMMITS }}

          **Образ:** \`cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${VERSION}\`
          EOF
          )
          gh issue create \
            --title "Release ${VERSION}" \
            --body "$BODY" \
            --label release

      - name: open PR back to main
        id: pr
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          PR_URL=$(gh pr create \
                    --head "releases/${VERSION}" \
                    --base "main" \
                    --title "Merge release ${VERSION} to main" \
                    --body "CI-autogenerated PR for release ${VERSION}")
          echo "pr=$PR_URL" >> $GITHUB_OUTPUT
          echo "Opened $PR_URL"

      - name: enable auto-merge
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh pr merge "${{ steps.pr.outputs.pr }}" \
            --merge --auto --delete-branch
