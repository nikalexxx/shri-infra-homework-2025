name: Manual Release Flow

on:
  workflow_dispatch:

env:
  # Укажи свой идентификатор реестра Yandex Container Registry
  YC_REGISTRY_ID: "cr.yandex/<идентификатор_реестра>"
  DOCKER_IMAGE_NAME: "app"
  GITHUB_OWNER: ${{ github.repository_owner }}
  GITHUB_REPO: ${{ github.event.repository.name }}

jobs:
  lint-and-tests:
    name: Lint and Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job_type: ["lint", "test"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.job_type }}
        run: |
          if [ "${{ matrix.job_type }}" == "lint" ]; then
            npm run lint
          else
            npm run test
          fi

  release-flow:
    name: Release Process
    needs: lint-and-tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      statuses: write
      id-token: write

    steps:
      - name: Set up Git
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get current version (run number)
        id: vars
        run: echo "VERSION=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Create and push release branch
        run: |
          git checkout -b releases/${{ env.VERSION }}
          git push origin releases/${{ env.VERSION }}

      - name: Build Docker image
        run: |
          docker build -t $YC_REGISTRY_ID/$DOCKER_IMAGE_NAME:${{ env.VERSION }} \
                       -t $YC_REGISTRY_ID/$DOCKER_IMAGE_NAME:${{ env.VERSION }}_latest .

      - name: Log in to Yandex Container Registry
        run: |
          yc container docker login --format json > ~/.docker/config.json

      - name: Push Docker images to YCR
        run: |
          docker push $YC_REGISTRY_ID/$DOCKER_IMAGE_NAME:${{ env.VERSION }}
          docker push $YC_REGISTRY_ID/$DOCKER_IMAGE_NAME:${{ env.VERSION }}_latest

      - name: Get previous tag
        id: prev_tag
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV

      - name: Get commit list since last release
        id: commits
        run: |
          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%h %s (%an)" HEAD~1..HEAD)
          else
            COMMITS=$(git log --pretty=format:"%h %s (%an)" $PREV_TAG..HEAD)
          fi
          echo "COMMITS=$(echo "$COMMITS" | sed 's/%/%%/g')" >> $GITHUB_ENV

      - name: Create Git Tag
        run: |
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}

      - name: Generate changelog entry
        id: changelog
        run: |
          DATE=$(date "+%Y-%m-%d")
          echo "ENTRY=## Version ${{ env.VERSION }} ($DATE)\n\n$(echo \"$COMMITS\" | sed 's/^/- /')\n" >> $GITHUB_ENV

      - name: Update CHANGELOG.md
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: CHANGELOG.md
          commit_message: "docs(changelog): add version ${{ env.VERSION }}"
        run: |
          # Добавляем новую версию в начало файла
          awk -v entry="${{ env.ENTRY }}" 'NR == 1 { print entry "\n" } { print }' CHANGELOG.md > tmp && mv tmp CHANGELOG.md

      - name: Create GitHub Issue
        uses: peter-evans/create-issue-from-template@v2
        env:
          VERSION: ${{ env.VERSION }}
          DATE: $(date "+%Y-%m-%d")
          AUTHOR: ${{ github.actor }}
          COMMITS: ${{ env.COMMITS }}
          DOCKER_IMAGE_URL: $YC_REGISTRY_ID/$DOCKER_IMAGE_NAME:${{ env.VERSION }}
        with:
          title: "Release v${{ env.VERSION }}"
          content-path: .github/ISSUE_TEMPLATE/release_issue_template.md
          assignees: ${{ github.actor }}
