name: Create Release

on:
  workflow_dispatch:

env:
  REGISTRY_ID: crpqbd58jh7j024b4dqk
  REGISTRY_URL: cr.yandex

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Create release branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b releases/${{ github.run_number }}
          git push origin releases/${{ github.run_number }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Yandex Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.YC_USERNAME }}
          password: ${{ secrets.YC_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY_URL }}/${{ env.REGISTRY_ID }}/app:${{ github.run_number }}
            ${{ env.REGISTRY_URL }}/${{ env.REGISTRY_ID }}/app:${{ github.run_number }}_latest

      - name: Create tag
        run: |
          git tag v${{ github.run_number }}
          git push origin v${{ github.run_number }}

      - name: Get commits since last release
        id: get-commits
        run: |
          # Get the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --no-merges)
          else
            COMMITS=$(git log --oneline --no-merges ${LAST_TAG}..HEAD)
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Issue
        run: |
          gh issue create \
            --title "Release v${{ github.run_number }}" \
            --body "## Release Information

          **Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          **Author:** ${{ github.actor }}
          **Version:** ${{ github.run_number }}

          ## Commits since last release

          \`\`\`
          ${{ steps.get-commits.outputs.commits }}
          \`\`\`

          ## Docker Image

          \`${{ env.REGISTRY_URL }}/${{ env.REGISTRY_ID }}/app:${{ github.run_number }}\`"

      - name: Update CHANGELOG.md
        run: |
          # Get the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --no-merges)
          else
            COMMITS=$(git log --oneline --no-merges ${LAST_TAG}..HEAD)
          fi

          # Create new changelog entry
          echo "# v${{ github.run_number }}" > temp_changelog.md
          echo "" >> temp_changelog.md
          echo "$COMMITS" >> temp_changelog.md
          echo "" >> temp_changelog.md

          # Prepend to existing CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            cat temp_changelog.md CHANGELOG.md > temp_full_changelog.md
            mv temp_full_changelog.md CHANGELOG.md
          else
            mv temp_changelog.md CHANGELOG.md
          fi

          # Commit and push changes
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG.md for release v${{ github.run_number }}"
          git push origin releases/${{ github.run_number }}
